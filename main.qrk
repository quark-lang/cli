{
  # Taking first argument as command
  (let command (index std:args 0))
  (import "std.qrk")
  (import "operators.qrk")
  (import "test.ts")
  (import "https://deno.land/std@0.83.0/fmt/colors.ts")

  (let version (fn () {
    (let file ".quarkrc")
    (let content (fs:read (fs:join fs:root file)))
    (let config (parseConfiguration content))

    (return (getProperty config "version"))
  }))

  (if (or (= command "update") (= command "upgrade")) {
    (let quark:path (env "QUARK"))
    (let quark:std (fs:join quark:path "std"))
    (let quark:cli (fs:join quark:path "cli"))

    (run "git fetch --all" quark:path)
    (run "git reset --hard origin/master" quark:path)
    (run "git pull -f --no-rebase origin master" quark:path)

    (run "git fetch --all" quark:std)
    (run "git reset --hard origin/master" quark:std)
    (run "git pull -f --no-rebase origin master" quark:std)

    (run "git fetch --all" quark:cli)
    (run "git reset --hard origin/master" quark:cli)
    (run "git pull -f --no-rebase origin master" quark:cli)

    (let commit (run "git rev-parse --short HEAD~2" quark:path))
    (print (gray "Updated Quark to commit") (bold (trim commit)) (gray "on branch master."))
  })

  # Checking if command is not defined and returning REPL
  (if (or (= command none) (= command "repl")) {
    (import "repl.qrk")
    (repl (version))
    (return none)
  })

  # Checking for help command
  (if (or (= command "-h") (= command "--help")) (import "commands/help.qrk"))

  # Checking for install command
  (if (= command "install") (import "commands/install.qrk"))

  # Checking for run command
  (if (!= none command) {
    (let path (fs:join fs:cwd command))
    (let content (fs:read path))

    (let run (fn (file) {
      (let path (fs:join fs:cwd file))
      (let content (fs:read path))
      (return (std:run content path))
    }))

    (if (or (!= content none) (= command "run")) {
      # Checking if first argument is file
      (if (= command "run")
        (set path (fs:join (fs:dirname path) (index std:args 1)))
      )
      (import path)
    })

  })

  # Use this command only inside scripts
  (if (= command "env") {
    (let file (index std:args 1))
    (set std:args (slice std:args 2))
    (run file (path:isAbsolute file))
  })
}