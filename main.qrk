{
  # Taking first argument as command
  (let configuration (config:parse (fs:join fs:root ".quarkrc")))
  (let version (index (index configuration 2) 1))
  (let command (index std:args 0))

  (if (or (= command "update") (= command "upgrade")) {
    (let latestRelease quark:release)
    (if (!= version latestRelease) {
      (print "New release found:" latestRelease)
    } (return (print "No new releases found...")))
  })

  # Checking if command is not defined and returning REPL
  (if (or (= command none) (= command "repl")) {
    (import "repl.qrk")
    (repl version)
    (return none)
  })

  # Checking for Help command
  (if (or (= command "-h") (= command "--help")) {
    # Printing headline
    (print (white (+ "Quark " version)))
    (print (gray "An interpreted Lisp programming language written in Typescript.\n"))
    (print "Website:" "https://quark-lang.dev/")
    (print "Repository:" "https://github/quark-lang/\n")

    # Printing commands
    (print (bold "COMMANDS:"))
    (print "  " "- run" "    " (gray "Run a Quark program"))
    (print "  " "- test" "   " (gray "Run tests"))
    (print "  " "- repl" "   " (gray "Start new REPL session"))
    (print "  " "- update" " " (gray "Update Quark to latest found release"))

    (return none)
  })

  # Checking for run command
  (let path (fs:join fs:cwd command))
  (let content (fs:read path))

  (if (or (!= content none) (= command "run")) {
    # Checking if first argument is file
    (if (= command "run")
      {
        # Running script according to second argument
        (let path (fs:join fs:cwd (index std:args 1)))
        (let content (fs:read path))
        (std:run content path)
      }
      (std:run content path)
    )
  })
}