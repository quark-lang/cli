{
  # Taking first argument as command
  (import "io.qrk")
  (import "list.qrk")
  (let command (index std:args 0))

  (if (or (= command "update") (= command "upgrade")) {
    (let latestRelease quark:release)
    (if (!= version latestRelease) {
      (print "New release found:" latestRelease)
    } (return (print "No new releases found...")))
  })

  (let version (fn () {
    (import "configuration.qrk")

    (let file ".quarkrc")
    (let content (fs:read (fs:join fs:root file)))
    (let config (parseConfiguration content))

    (return (getProperty config "version"))
  }))

  # Checking if command is not defined and returning REPL
  (if (or (= command none) (= command "repl")) {
    (import "repl.qrk")
    (repl (version))
    (return none)
  })

  # Checking for help command
  (if (or (= command "-h") (= command "--help")) (import "commands/help.qrk"))

  # Checking for install command
  (if (= command "install") (import "commands/install.qrk"))

  # Checking for run command
  (let run (fn (file absolute) {
    (let path (if (= (or absolute false) true) file (fs:join fs:cwd file)))
    (let content (if (= (or absolute false) true) (fs:read file) (fs:read path)))

    (return (std:run content path))
  }))

  (if (= command "run") {
    (let file (index std:args 1))
    (run file (path:isAbsolute file))
  })

  # Use this command only inside scripts
  (if (= command "env") {
    (let file (index std:args 1))
    (set std:args (slice std:args 2))
    (run file (path:isAbsolute file))
  })
}